name: Docker

on:
  push:

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: payment-api
  DB_URL: jdbc:postgresql://localhost:5432/postgres
  DB_USER: postgres
  DB_PASS: postgres
  API_AUDIENCE: ${{ secrets.API_AUDIENCE }}
  ISSUER: ${{ secrets.ISSUER }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Extract branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        shell: bash
        id: extract_branch
      - name: Grant execute permission for Maven wrapper
        run: chmod +x mvnw
      - name: Build with Maven
        run: ./mvnw compile package
      - name: Upload jar for docker
        uses: actions/upload-artifact@v2
        with:
          name: jar
          path: target/payment-0.0.1-SNAPSHOT.jar
#       - name: Sonarcloud
#         run: ./gradlew sonarqube
#         env:
#           BRANCH: ${{ steps.extract_branch.outputs.branch }}
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      - name: Download built jar
        uses: actions/download-artifact@v2
        with:
          name: jar

      - name: Move jar to folder
        run: mkdir target && mv payment-0.0.1-SNAPSHOT.jar target/

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
